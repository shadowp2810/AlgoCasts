Constant Time 
1
No matter how many elements we are working with,
the algorithm or operation 
will always take the same amount of time.

Logarithmic Time
log(n)
If doubling the number of elements you are iterating over 
doesn't double the amount of work.
Always assume searching operations are log(n).

Linear Time
n
Iterating through all elements in a collection of data.
For loop spanning '0' to 'array.length' probably has n or linear runtime.

Quasilinear Time
n * log(n) 
If doubling the number of elements you are iterating over
doesn't double the amount of work.
Always assume that any sorting operation is n * log(n)

Quadratic Time
n ^ 2
Every element in a collection has to be compared to every other element.
'The handshake problem'

Exponential Time
2 ^ n
If you add a single element to a collection,
the processing power required doubles.

Big 'O' Notation
O(n) -> Linear
O(1) -> Constant
O(n^2) -> Quadratic

Common Runtime Complexities
Iterating with simple for loop through single collection? Probably O(n)
Iterating though half a collection? Still O(n), no constants in runtime.
Iterating though two differnt collection with sperate for loops? O(n+m)
Two nested for loops iterating over same collection? O(n^2)
Two nested for loops interating over differnt collections? O(n*m)
Sorting? O(n * log(n))
Searching a sorted array? O(log(n))


Data Structures-
Ways of organizing information with optimal runtime complexity
for adding or removing records.
Javascript natively implements several data structures.

Queue
Like standing in a line. Enqueuing or adding, Dequeuing or removing.
FIFO or First in First Out.
Queue's Array equivalent for Add to Queue is array.unshift(),
and for Remove from Queue is array.pop()
In JS you might make a Queue Class, and hide acess to all Array methods,
other than unshift and pop. 

Stack 
Push to add to stack, Pop to remove from stack. 
FILO or First in Last Out.

LinkedLists
Each Node in a Linked List has Data bucket and a Reference to Next Node.
Data can be a number, array, object, any js value can be contained in a node.
Lists have a Head Node at front and a Tail Node at end.
LinkedList class has no idea how many nodes belong to a linedlist,
or what data exists in a linkedlist. It only knows about the first node.
To answer any questsion about it, it need to crawl over the list and count the nodes.
All the LinkedList class knows is the first node.
